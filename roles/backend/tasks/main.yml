---

- name: Install misc packages
  apt:
    name:
      - python3-venv
      - nginx
      - supervisor

- name: Install sqlite
  apt:
    name:
      - sqlite3
  when: database_provider == "sqlite"

- name: Install postgresql
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - libpq-dev
  when: database_provider == "postgresql"

- name: Install psycopg2 on system
  pip:
    name: psycopg2

- name: Create a postgresql database
  community.postgresql.postgresql_db:
    name: "{{ project_slug_for_environment }}"
  become: true
  become_user: postgres

- name: Create database user
  community.postgresql.postgresql_user:
    db: "{{ project_slug_for_environment }}"
    name: "{{ project_slug_for_environment }}"
    password: "{{ database_password }}"
    priv: ALL
  become: true
  become_user: postgres

- name: Create main user
  user:
    name: "{{ main_user }}"
    uid: "{{ main_user_uid }}"
    shell: /bin/bash

- name: Create directories and set permissions
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  loop:
    - path: "/{{ organization_slug }}"
      mode: '2775'
      owner: root
    - path: "/{{ organization_slug }}/{{ project_slug_for_environment }}"
      mode: '2775'
      owner: "{{ main_user }}"
    - path: "/etc/{{ organization_slug }}"
      mode: '2775'
      owner: "{{ main_user }}"
    - path: "/etc/{{ organization_slug }}/{{ project_slug_for_environment }}"
      mode: '2775'
      owner: "{{ main_user }}"
    - path: "{{ var_log_path }}"
      mode: '2770'
      owner: "{{ main_user }}"
    - path: "{{ venv.path }}"
      mode: '0755'
      owner: "{{ main_user }}"
    - path: "/{{ organization_slug }}/{{ project_slug_for_environment }}/backups/"
      mode: '0755'
      owner: "{{ main_user }}"


- name: Create backend venv
  command:
    cmd: python3 -m venv --system-site-packages {{ venv.path }}
    creates: "{{ venv.path }}/bin/python"
  become: true
  become_user: "{{ main_user }}"

- name: Install {{ project_slug_for_environment }}-ctl
  template:
    src: backend-ctl.j2
    dest: "/usr/local/bin/{{ project_slug_for_environment }}-ctl"
    mode: "0755"

- name: Copy django settings
  template:
    src: settings.ini.j2
    dest: "{{ backend_settings_path }}"
    owner: "{{ main_user }}"
    group: devops
    mode: 0660

- name: Copy supervisord config
  template:
    src: backend-supervisor.conf.j2
    dest: "{{ supervisor_conf }}/{{ project_slug_for_environment }}.conf"
    owner: root
    group: root
    mode: 0644

- name: Install {{ project_slug_for_environment }} supervisor
  supervisorctl:
    name: "{{ project_slug_for_environment }}"
    state: present

- name: get latest code
  git:
    repo: '{{ backend_repo }}'
    dest: "{{ backend_path }}"
    key_file: "{{ identity_file_path }}"
    force: true
    version: "{{ backend_branch }}"
    accept_hostkey: true
  become_user: "{{ main_user }}"
  register: clonecode

- name: Install python dependencies
  command:
    cmd: "{{ venv.path }}/bin/pip install -r requirements.txt"
    chdir: "{{ backend_path }}"
  when: clonecode.changed or force_update is defined

- name: run migrations
  command:
    cmd: "/usr/local/bin/{{ project_slug_for_environment }}-ctl migrate"
  become_user: "{{ main_user }}"
  become: true
  when: clonecode.changed or force_update is defined

- name: collect backend static files
  command:
    cmd: "/usr/local/bin/{{ project_slug_for_environment }}-ctl collectstatic --no-input"
  when: clonecode.changed or force_update is defined

- name: Restart {{ project_slug }} supervisor
  supervisorctl:
    name: "{{ project_slug }}"
    state: restarted
  when: clonecode.changed or force_update is defined

- name: Backup database
  ansible.builtin.shell: "pg_dump {{ project_slug_for_environment }} > \
/{{ organization_slug }}/{{ project_slug_for_environment }}/backups/backup.sql"
  become_user: "{{ main_user }}"
  when: inventory_hostname == "prod"

- name: Copy production dump locally
  ansible.builtin.fetch:
    src: "/{{ organization_slug }}/{{ project_slug_for_environment }}/backups/backup.sql"
    dest: "{{ lookup('env','HOME') }}/backups/\
{{ ansible_date_time.iso8601 }}_{{ project_slug_for_environment }}_backup.sql"
    flat: true
  when: inventory_hostname == "prod"

- include: cron.yml
